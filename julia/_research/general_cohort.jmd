# Initial Set-Up

## Activating Project Environment

```julia
using DrWatson
@quickactivate "MentalHealthEquity"
```

## Packages Used in Analysis

```julia
using CSV
using DBInterface
using Makie
using CairoMakie
using LibPQ
using DataFrames
using Statistics
using MentalHealthEquity
using Shapefile
using Weave
using FunSQL:
    SQLTable,
    Agg,
    As,
    Define,
    From,
    Fun,
    Get,
    Group,
    Join,
    Order,
    Select,
    Where,
    render,
    Limit
```

Package descriptions:

- [`DataFrames`](https://github.com/JuliaData/DataFrames.jl) - Julia's dataframe handler for easily manipulating data

- [`DrWatson`](https://github.com/JuliaDynamics/DrWatson.jl) - Incredibly helpful tool for managing Julia-based scientific experiments and exploration

- [`Makie`](https://github.com/JuliaPlots/Makie.jl) - Data visualization ecosystem for the Julia programming language, with high performance and extensibility

- [`Statistics`](https://github.com/JuliaLang/Statistics.jl) - Julia's standard library for useful statistical methods

- [`Weave`](https://github.com/JunoLab/Weave.jl) - Converts Julia Markdown files to other forms of output

# Introduction

## Background

The intent of this report is to investigate the characterization statement:

> **Characterization Statement 1:** Characterize the individuals being seen for mental health care services (related to depression, bipolar disorder, and suicidality) at least one time – including hospitalization events.

This characterization statement is founded on the central research topic for this study:

> **Research Topic:** Based on [CLAIMS], we see X% of all persons with at least one claim indicating [DEPRESSION/BIPOLAR DISORDER/SUICIDALITY] are not seen again.

By which the phrases "…all persons…" refer to those seen by patience care provider, etc. and "…are not seen again." implies lack of adherence to care.

## Data Sources Used

<!--TODO: Add information about data used in this particular notebook-->

## Downloading Data Sources

### State Shapefiles

```julia, eval = false
download_dataset(; dataset_names = ["US States"])
data_path = datadir("exp_raw")
shape_file = "US States/cb_2018_us_state_5m.shp"
states = joinpath(data_path, shape_file) |> Shapefile.Table |> DataFrame
```

```julia, eval = false
# TODO: plot heatmap of patient distribution
f = Figure()
Axis(f[1, 1])
state = states[1, :].geometry.points
points = [(state[i].x, state[i].y) for i in 1:length(state)]
points = Point2f0[points...]
poly(points)
```


# Data Analysis Preparation

## Creating Initial Connection

Defining connection details for connecting to a given database:

```julia, results = "hidden"
conn = LibPQ.Connection("")
```

## Creating Initial OMOP Tables

Using `FunSQL` we will query the table and details about a given schema.
In this case, the schema follows the [OMOP CDM v5](https://ohdsi.github.io/CommonDataModel/index.html) schema:

```julia, results = "hidden"
schema_info = introspect(conn; schema = :mimic_v531)
```

For this analysis, we will work with the following tables from the schema:

```julia, results = "hidden"
person = schema_info[:person]
location = schema_info[:location]
observation_period = schema_info[:observation_period]
condition_occurrence = schema_info[:condition_occurrence]
visit_occurrence = schema_info[:visit_occurrence]
care_site = schema_info[:care_site]
```

<!--TODO: Add description on what these tables are from the Book of OHDSI-->
Per the [Book of OHDSI], here are the break downs for these tables:

- `PERSON` - 
- `LOCATION` - 
- `OBSERVATION_PERIOD` - 
- `CONDITION_OCCURRENCE` -



# Cohort Populations

## General Cohort

### Overall Trends

#### Patient Spread

This calculates the number of patients in the dataset:

```julia, eval = true, results = "hidden", echo = false
q = From(person) |> Group() |> Select(Agg.count(distinct = true, Get.person_id))
sql = render(q, dialect = :postgresql)
result = LibPQ.execute(conn, sql) |> DataFrame
```

In this dataset, there are `j result.count[1]` patients.
To further examine this data, we can break them down across the following axes:

- State
- Age
- Race
- Gender
- Care setting

##### State Breakdown [DONE]

Here we define our SQL query to join the `PERSON` table on the `LOCATION` table:

```julia, eval = true, echo = false, results = "hidden"
q =
    From(person) |>
    Join(
        From(location) |> As(:location),
        on = Get.location.location_id .== Get.location_id,
    ) |>
    Group(Get.location.state) |> 
    Select(Get.state, Agg.count())
sql = render(q, dialect = :postgresql)
df_states = LibPQ.execute(conn, sql) |> DataFrame
sort!(df_states, :count)
```

```julia, eval = true, echo = false,
f = Figure(resolution = (1600, 800))
ax = Axis(f[1, 1])

states = 1:length(df_states.state)
counts = df_states.count

barplot!(
    states,
    counts)
ax.xticks = (states, string.(df_states.state))
ax.xticksize = 12

ax.title = "Patients across State"
ax.titlesize = 28

ax.xlabel = "States"
ax.xlabelsize = 20

ax.ylabel = "Patient counts"
ax.ylabelsize = 20

display(f)
```

##### Age Breakdown [DONE]

```julia, eval = true, results = "hidden", echo = false,
q = From(person) |>
Join(:op => observation_period, Get.person_id .== Get.op.person_id) |>
Define(:age => Fun.date_part("year", Fun.age(Get.op.observation_period_end_date, Fun.make_date(Get.year_of_birth, 1, 1)))) |>
    Define(:age_group => Fun.case(
                         Get.age .< 10, "0 - 9",
    			 Get.age .< 20, "10 - 19",
			 Get.age .< 30, "20 - 29",
			 Get.age .< 40, "30 - 39",
			 Get.age .< 50, "40 - 49",
			 Get.age .< 60, "50 - 59",
			 Get.age .< 70, "60 - 69",
			 Get.age .< 80, "70 - 79",
			 "80 - 89")) |>
			 Group(Get.age_group) |>
			 Select(Get.age_group, Agg.count()) 

sql = render(q, dialect = :postgresql)
res = LibPQ.execute(conn, sql)
df_age_group = DataFrame(res)
sort!(df_age_group, :age_group)
```

```julia, eval = true, echo = false,
f = Figure(resolution = (1200, 600))
ax = Axis(f[1, 1])

x_locs = 1:nrow(df_age_group)
counts = df_age_group.count

barplot!(
    x_locs,
    counts)
ax.xticks = (x_locs, df_age_group.age_group)
ax.xticksize = 12

ax.title = "Patients Age Breakdown"
ax.titlesize = 28

ax.xlabel = "Age Groups"
ax.xlabelsize = 20

ax.ylabel = "Patient counts"
ax.ylabelsize = 20

display(f)
```

##### Racial Breakdown [DONE]

```julia, eval = true, echo = false, results = "hidden"
q =
    From(person) |>
			 Group(Get.race_concept_id) |>
			 Select(Get.race_concept_id, Agg.count())

sql = render(q, dialect = :postgresql)
res = LibPQ.execute(conn, sql)
df_race = DataFrame(res)
```

```julia, eval = true, echo = false,
f = Figure(resolution = (1200, 600))
ax = Axis(f[1, 1])

x_locs = 1:nrow(df_race)
counts = df_race.count

barplot!(
    x_locs,
    counts)
ax.xticks = (x_locs, string.(df_race.race_concept_id))
ax.xticksize = 12

ax.title = "Patient Race Breakdown"
ax.titlesize = 28

ax.xlabel = "Races"
ax.xlabelsize = 20

ax.ylabel = "Patient counts"
ax.ylabelsize = 20

display(f)
```

##### Gender Breakdown [DONE]

```julia, eval = true, echo = false, results = "hidden"
q =
    From(person) |>
			 Group(Get.gender_concept_id) |>
			 Select(Get.gender_concept_id, Agg.count())
		

sql = render(q, dialect = :postgresql)
res = LibPQ.execute(conn, sql)
df_gender = DataFrame(res)
```

```julia, eval = true, echo = false
f = Figure(resolution = (1200, 600))
ax = Axis(f[1, 1])

x_locs = 1:nrow(df_gender)
counts = df_gender.count

barplot!(
    x_locs,
    counts)
ax.xticks = (x_locs, string.(df_gender.gender_concept_id))
ax.xticksize = 12

ax.title = "Patients Gender Breakdown"
ax.titlesize = 28

ax.xlabel = "Genders"
ax.xlabelsize = 20

ax.ylabel = "Patient counts"
ax.ylabelsize = 20

display(f)
```

##### Care Site Breakdown

```julia, eval = false, echo = false, results = "hidden"
q =
    From(care_site) |>
    Where(Get.place_of_service_source_value .== "Inpatient Facility") |> 
    Select(Get.care_site_id)

sql = render(q, dialect = :postgresql)
res = LibPQ.execute(conn, sql)
inpatient_care_sites = DataFrame(res)
```

```julia, eval = false, echo = false, results = "hidden"
q =
    From(care_site) |>
    Where(Get.place_of_service_source_value .== "Outpatient Facility") |> 
    Select(Get.care_site_id)

sql = render(q, dialect = :postgresql)
res = LibPQ.execute(conn, sql)
outpatient_care_sites = DataFrame(res)
```

```julia, eval = false, echo = false, results = "hidden"
q =
    From(visit_occurrence) |>
    Group(Get.care_site_id) |>
    Select(Get.care_site_id, Agg.count())
    # Group(Get.place_of_service_source_value) |>
    # Select(Get.place_of_service_source_value, Agg.count())

sql = render(q, dialect = :postgresql)
res = LibPQ.execute(conn, sql)
df_care_site = DataFrame(res)
```

```julia, eval = false, echo = false
f = Figure(resolution = (1200, 600))
ax = Axis(f[1, 1])

x_locs = 1:nrow(df_care_site)
counts = df_care_site.count

barplot!(
    x_locs,
    counts)
ax.xticks = (x_locs, string.(df_care_site.place_of_service_concept_id))
ax.xticksize = 12

ax.title = "Patient Spread across Care Sites"
ax.titlesize = 28

ax.xlabel = "Care Site Types"
ax.xlabelsize = 20

ax.ylabel = "Patient counts"
ax.ylabelsize = 20

display(f)
```
