library("DatabaseConnector")

# Example
connectionDetails <- createConnectionDetails(
  dbms = "postgresql",
  server = "data.hdap.gatech.edu/synpuf_v5",
  user = "synpuf_v5",
  password = "i3lworks",
  port = 5434,
  pathToDriver = "utils"
)


conn <- connect(connectionDetails)
sql <- "
   SELECT *
   FROM person
   WHERE PERSON_ID = 1732315
   LIMIT 1;
   "
querySql(conn, sql)
disconnect(conn)

# Output:
# PERSON_ID YEAR_OF_BIRTH RACE_CONCEPT_ID
# 1     77441          1926            8527


# Get all the tables
conn <- connect(connectionDetails)
practice <-
  "select TABLE_NAME from information_schema.tables WHERE TABLE_TYPE = 'BASE TABLE'"
querySql(conn, practice)
disconnect(conn)

# Get schema
conn <- connect(connectionDetails)
practice <- "select schema_name from information_schema.schemata;"
querySql(conn, practice)
disconnect(conn)



## old demographic sql with all joined
practice <- "
  SELECT @table.@concept_name, count(*)
  FROM person
      LEFT JOIN (select LOCATION_ID, STATE FROM location) AS location ON
        person.location_id = location.location_id
      LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Race'
              AND STANDARD_CONCEPT = 'S') AS race ON
        person.race_concept_id = race.concept_id
      LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Ethnicity'
              AND STANDARD_CONCEPT = 'S') AS ethnicity ON
        person.ethnicity_concept_id = ethnicity.concept_id
      LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Gender'
              AND STANDARD_CONCEPT = 'S') AS gender ON
        person.gender_concept_id = gender.concept_id
  GROUP BY @table.@concept_name
  ORDER BY count(*) DESC
"


conn <- connect(connectionDetails)
practice <-
  "select DISTINCT DOMAIN_ID FROM concept"
querySql(conn, practice)
disconnect(conn)



conn <- connect(connectionDetails)
practice <-
  "select * FROM concept where DOMAIN_ID = 'Race' AND STANDARD_CONCEPT = 'S' LIMIT 1"
querySql(conn, practice)
disconnect(conn)


conn <- connect(connectionDetails)
practice <-
  "SELECT * FROM condition_occurrence LIMIT 1"
querySql(conn, practice)
disconnect(conn)


conn <- connect(connectionDetails)
practice <-
  # "select * FROM condition_occurrence LIMIT 1"
  "
  SELECT *
  FROM concept
  WHERE CONCEPT_ID = 0
  LIMIT 1
  "
querySql(conn, practice)
disconnect(conn)

conn <- connect(connectionDetails)
practice <-
  "
  SELECT COUNT(*)
      FROM condition_occurrence
      LEFT JOIN concept
      ON condition_occurrence.CONDITION_CONCEPT_ID = concept.CONCEPT_ID
  "
querySql(conn, practice)
disconnect(conn)


conn <- connect(connectionDetails)
practice <-
  "
  SELECT COUNT(*)
  FROM person
  LEFT JOIN
    ( SELECT *
      FROM condition_occurrence
      LEFT JOIN concept
      ON condition_occurrence.CONDITION_CONCEPT_ID = concept.CONCEPT_ID ) condition
  ON person.PERSON_ID = condition.PERSON_ID
  "
querySql(conn, practice)
disconnect(conn)


conn <- connect(connectionDetails)
practice <- "
  SELECT  MIN(YEAR(visit.visit_end_date) - person.year_of_birth) as min_age,
          MAX(YEAR(visit.visit_end_date) - person.year_of_birth) as max_age,
          MIN(visit.visit_end_date) as first_visit,
          MAX(visit.visit_end_date) as last_visit
  FROM person
    JOIN visit_occurrence visit USING(person_id)
"
renderTranslateQuerySql(conn, practice)
disconnect(conn)



conn <- connect(connectionDetails)
practice <-
  "select LOCATION_ID, STATE FROM location"
renderTranslateQuerySql(conn,practice)
disconnect(conn)

conn <- connect(connectionDetails)
practice <-
  "
  SELECT PERSON_INFO.CONCEPT_NAME, COUNT(*)
  FROM
    ( SELECT *
      FROM visit_occurrence visit
      JOIN
        (SELECT CONCEPT_NAME , CONCEPT_ID
          FROM concept
          WHERE DOMAIN_ID = 'Visit'
          AND STANDARD_CONCEPT = 'S') concept
      ON visit.VISIT_CONCEPT_ID = concept.CONCEPT_ID
      WHERE LOWER(concept.CONCEPT_NAME) LIKE '%@a%') VISIT_INFO
    LEFT JOIN
      ( SELECT *
        FROM person
        LEFT JOIN (select LOCATION_ID, STATE FROM location) AS location ON
          person.location_id = location.location_id
        LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Race'
          AND STANDARD_CONCEPT = 'S') AS race ON
          person.race_concept_id = race.concept_id
        LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Ethnicity'
          AND STANDARD_CONCEPT = 'S') AS ethnicity ON
          person.ethnicity_concept_id = ethnicity.concept_id
        LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Gender'
          AND STANDARD_CONCEPT = 'S') AS gender ON
        person.gender_concept_id = gender.concept_id ) PERSON_INFO
    USING(PERSON_ID)
  GROUP BY PERSON_INFO.CONCEPT_NAME
  ORDER BY COUNT(*) DESC"
renderTranslateQuerySql(conn, practice, a = "inpatient")
disconnect(conn)




conn <- connect(connectionDetails)
practice <- "
  SELECT @domain.concept_name, count(*)
  FROM person
  LEFT JOIN (SELECT LOCATION_ID, STATE FROM location) AS location ON
    person.location_id = location.location_id
  LEFT JOIN ( SELECT *
              FROM concept
              WHERE DOMAIN_ID = 'Race' AND
                    concept.STANDARD_CONCEPT = 'S') AS @domain
  ON person.@a  = @domain.concept_id
  GROUP BY @domain.concept_name"
renderTranslateQuerySql(conn, practice,
                        domain = 'race', a = sprintf('%s_concept_id', domain))
disconnect(conn)

# Generic SQL Query
conn <- connect(connectionDetails)
# practice <- "
#   SELECT {@x} ? {@table.@concept_name, count(DISTINCT PERSON_ID)} : {*}
#   FROM person
#       LEFT JOIN (select LOCATION_ID, STATE FROM location) AS location ON
#         person.location_id = location.location_id
#       LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Race'
#               AND STANDARD_CONCEPT = 'S') AS race ON
#         person.race_concept_id = race.concept_id
#       LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Ethnicity'
#               AND STANDARD_CONCEPT = 'S') AS ethnicity ON
#         person.ethnicity_concept_id = ethnicity.concept_id
#       LEFT JOIN (select * FROM concept WHERE DOMAIN_ID = 'Gender'
#               AND STANDARD_CONCEPT = 'S') AS gender ON
#         person.gender_concept_id = gender.concept_id
#   {@x}? {GROUP BY @table.@concept_name
#         ORDER BY COUNT DESC} :
#         {LIMIT 10}
#

conn <- connect(connectionDetails)
practice <- "
  SELECT {@x} ? {@table.@concept_name, count(DISTINCT PERSON_ID)} : {*}
  FROM person
      LEFT JOIN (SELECT LOCATION_ID, STATE FROM location) AS location ON
        person.location_id = location.location_id
      LEFT JOIN (SELECT CONCEPT_ID,
                    CONCEPT_NAME as RACE_CONCEPT_NAME
                  FROM concept WHERE DOMAIN_ID = 'Race'
                  AND STANDARD_CONCEPT = 'S') AS race ON
        person.race_concept_id = race.concept_id
      LEFT JOIN ( SELECT CONCEPT_ID,
                    CONCEPT_NAME as ETHNICITY_CONCEPT_NAME
                  FROM concept WHERE DOMAIN_ID = 'Ethnicity'
                    AND STANDARD_CONCEPT = 'S') AS ethnicity ON
        person.ethnicity_concept_id = ethnicity.concept_id
      LEFT JOIN (SELECT CONCEPT_ID,
                    CONCEPT_NAME as GENDER_CONCEPT_NAME
                  FROM concept WHERE DOMAIN_ID = 'Gender'
                  AND STANDARD_CONCEPT = 'S') AS gender ON
        person.gender_concept_id = gender.concept_id
  {@x}? {GROUP BY @table.@concept_name
        ORDER BY COUNT DESC} :
        {LIMIT 10}
"
# renderTranslateQuerySql(conn, practice, table = 'race', concept_name = 'race_concept_name')
# disconnect(conn)
renderTranslateQuerySql(conn, practice, x = F)
disconnect(conn)

conn <- connect(connectionDetails)
renderTranslateQuerySql(conn, sql, x = F)
disconnect(conn)



conn <- connect(connectionDetails)
practice <- "
  SELECT *
  FROM visit_occurrence visit
  JOIN
          ( SELECT CONCEPT_NAME , CONCEPT_ID
            FROM concept
            WHERE DOMAIN_ID = 'Visit'
            AND STANDARD_CONCEPT = 'S') concept
  ON visit.VISIT_CONCEPT_ID = concept.CONCEPT_ID
  WHERE LOWER(concept.CONCEPT_NAME) LIKE '%@a%'
  LIMIT 200
"
renderTranslateQuerySql(conn, practice, a = "inpatient")
disconnect(conn)

# old inpatient count
conn <- connect(connectionDetails)
practice <-
  "
  SELECT count(*) VISIT_COUNT,
    count(DISTINCT visit.person_id) PERSON_COUNT
  FROM visit_occurrence visit
  JOIN
    (SELECT CONCEPT_NAME , CONCEPT_ID
      FROM concept
      WHERE DOMAIN_ID = 'Visit'
      AND STANDARD_CONCEPT = 'S') concept
  ON visit.VISIT_CONCEPT_ID = concept.CONCEPT_ID
  WHERE LOWER(concept.CONCEPT_NAME) LIKE '%@a%'
  "
inpatient <- renderTranslateQuerySql(conn, practice, a = "inpatient")
disconnect(conn)



# current inpatient
conn <- connect(connectionDetails)
practice <- "
  SELECT @query
  FROM (SELECT *
        FROM visit_occurrence visit
        JOIN
          ( SELECT CONCEPT_NAME , CONCEPT_ID
            FROM concept
            WHERE DOMAIN_ID = 'Visit'
            AND STANDARD_CONCEPT = 'S') concept
        ON visit.VISIT_CONCEPT_ID = concept.CONCEPT_ID
        WHERE LOWER(concept.CONCEPT_NAME) LIKE '%@a%'
        ) VISIT_INFO
  JOIN
    ( SELECT *
      FROM person
          LEFT JOIN (SELECT LOCATION_ID, STATE FROM location) AS location ON
            person.location_id = location.location_id
          LEFT JOIN (SELECT CONCEPT_ID,
                        CONCEPT_NAME as RACE_CONCEPT_NAME
                      FROM concept WHERE DOMAIN_ID = 'Race'
                      AND STANDARD_CONCEPT = 'S') AS race ON
            person.race_concept_id = race.concept_id
          LEFT JOIN ( SELECT CONCEPT_ID,
                        CONCEPT_NAME as ETHNICITY_CONCEPT_NAME
                      FROM concept WHERE DOMAIN_ID = 'Ethnicity'
                        AND STANDARD_CONCEPT = 'S') AS ethnicity ON
            person.ethnicity_concept_id = ethnicity.concept_id
          LEFT JOIN (SELECT CONCEPT_ID,
                        CONCEPT_NAME as GENDER_CONCEPT_NAME
                      FROM concept WHERE DOMAIN_ID = 'Gender'
                      AND STANDARD_CONCEPT = 'S') AS gender ON
            person.gender_concept_id = gender.concept_id) DEMO_INFO
  USING(PERSON_ID)
  {@x} ? {GROUP BY DEMO_INFO.@concept_name
          ORDER BY COUNT DESC}
"
#total
# renderTranslateQuerySql(conn, practice,
#                         x = F,
#                         a = "inpatient",
#                         query = "COUNT(DISTINCT PERSON_ID)")
#state
renderTranslateQuerySql(conn, practice, x = T, a = "inpatient",
                        query = "DEMO_INFO.state, COUNT(DISTINCT PERSON_ID)",
                        concept_name = "state")
#age
# renderTranslateQuerySql(conn, practice, x = F, a = "inpatient",
#                         query = "
#                         SUM(CASE WHEN DEMO_INFO.)
#                         ")
disconnect(conn)
# 111637582 rows

### Gets the condition ids for bipolar ids = bipolar_concepts
# ( SELECT CONCEPT_ID,
#   CONCEPT_NAME as CONDITION_CONCEPT_NAME
#   FROM concept WHERE DOMAIN_ID = 'Condition'
#   AND STANDARD_CONCEPT = 'S'
#   AND CONCEPT_ID in @ids  )




connectionDetails <- createConnectionDetails(
  dbms = "postgresql",
  server = "data.hdap.gatech.edu/synpuf_v5",
  user = "synpuf_v5",
  password = "i3lworks",
  port = 5434,
  pathToDriver = "utils"
)
conn <- connect(connectionDetails)
practice <- "
  SELECT {@x} ?
      { person.PERSON_ID,
        person.YEAR_OF_BIRTH,
        person.MONTH_OF_BIRTH,
        person.DAY_OF_BIRTH,
        location.STATE,
        race.RACE_CONCEPT_NAME,
        ethnicity.ETHNICITY_CONCEPT_NAME,
        gender.GENDER_CONCEPT_NAME,
        condition.CONDITION_OCCURRENCE_ID,
        condition.CONDITION_CONCEPT_ID,
        condition.CONDITION_CONCEPT_NAME,
        condition.CONDITION_START_DATE,
        condition.CONDITION_END_DATE,
        condition.VISIT_OCCURRENCE_ID,
        visit_info.VISIT_CONCEPT_NAME} :
      {@query}
  FROM person
      LEFT JOIN (SELECT LOCATION_ID, STATE FROM location) AS location ON
        person.location_id = location.location_id
      LEFT JOIN (SELECT CONCEPT_ID,
                    CONCEPT_NAME as RACE_CONCEPT_NAME
                  FROM concept WHERE DOMAIN_ID = 'Race'
                  AND STANDARD_CONCEPT = 'S') AS race ON
        person.race_concept_id = race.concept_id
      LEFT JOIN ( SELECT CONCEPT_ID,
                    CONCEPT_NAME as ETHNICITY_CONCEPT_NAME
                  FROM concept WHERE DOMAIN_ID = 'Ethnicity'
                    AND STANDARD_CONCEPT = 'S') AS ethnicity ON
        person.ethnicity_concept_id = ethnicity.concept_id
      LEFT JOIN ( SELECT CONCEPT_ID,
                  CONCEPT_NAME as GENDER_CONCEPT_NAME
                  FROM concept WHERE DOMAIN_ID = 'Gender'
                      AND STANDARD_CONCEPT = 'S') AS gender ON
        person.gender_concept_id = gender.concept_id
      LEFT JOIN ( SELECT *
                  FROM CONDITION_OCCURRENCE
                  LEFT JOIN
                    ( SELECT CONCEPT_ID,
                      CONCEPT_NAME as CONDITION_CONCEPT_NAME
                      FROM concept WHERE DOMAIN_ID = 'Condition'
                          AND STANDARD_CONCEPT = 'S') concept ON
                  CONDITION_OCCURRENCE.CONDITION_CONCEPT_ID = concept.CONCEPT_ID) condition ON
        person.PERSON_ID = condition.PERSON_ID
      LEFT JOIN ( SELECT *
                  FROM VISIT_OCCURRENCE visit
                  JOIN
                        ( SELECT concept.CONCEPT_NAME AS VISIT_CONCEPT_NAME,
                              concept.CONCEPT_ID
                          FROM concept
                          WHERE DOMAIN_ID = 'Visit'
                          AND STANDARD_CONCEPT = 'S') concept
                  ON visit.VISIT_CONCEPT_ID = concept.CONCEPT_ID) as visit_info ON
                  person.PERSON_ID = visit_info.PERSON_ID AND
                  condition.VISIT_OCCURRENCE_ID = visit_info.VISIT_OCCURRENCE_ID
  WHERE condition.CONDITION_CONCEPT_ID in @ids
  {@y}? {@query2}
"
renderTranslateQuerySql(conn, practice, ids = bipolar_concept, x= F,
                        query = "visit_info.VISIT_CONCEPT_NAME, COUNT(*)",
                        y = T, query2 = "GROUP BY visit_info.VISIT_CONCEPT_NAME ORDER BY COUNT DESC")
disconnect(conn)




conn <- connect(connectionDetails)
practice <- "SELECT * FROM visit_occurrence LIMIT 10"
renderTranslateQuerySql(conn, practice)
disconnect(conn)
## There are 111,637,582 rows in the visit table



# Practice dbGetQuery() returns a df
conn <- connect(connectionDetails)
practice <- "SELECT * FROM PERSON"
person <- dbGetQuery(conn, practice)
disconnect(conn)





packages <- c("DatabaseConnector", "ROhdsiApi")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)){
    install.packages(packages[!installed_packages])
}

